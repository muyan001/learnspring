


AOP：面向切面编程
OOP：面向对象编程
面向切面编程：基于OOP基础之上的新的编程思想
指在程序运行期间，将某段代码动态的切入到指定方法的指定位置进行运行的这种编程方式，就是面向切面 编程；

场景：计算器运行计算方法的时候进行日志记录

加日志记录：
1.直接编写在方法内部，不推荐，修改维护麻烦
    日志记录：系统的辅助功能；
    业务逻辑：核心功能
    耦合
2.我们希望的是：
    业务逻辑：（核心功能）；日志模块，在核心功能运行期间，自己动态的加上
    运行的时候，日志动态的加上



动态代理
1.写起来难
2.jdk默认的动态代理，如果目标对象没有实现接口，是无法为他创建任何对象的

Spring动态代理：实现AOP功能，底层就是动态代理
    1.可以利用spring一句代码都不写的去创建动态代理
    2.实现简单，而且没有强制要求目标对象必须实现接口

   将某段代码（日志）动态的切入到指定方法（不把日志代码写死到业务逻辑中去）的指定方法（加、减乘除）进行运行的这种编程方式，就是面向切面 编程；



AOP 使用步骤：

1.导包

基础版的包：
spring-aspects

加强版的包： 即使目标对象没有实现任何借口，也能实现aop编程
com.springsource.net.sf.cglib-2.2.0.jar
com.springsource.org.aopalliance-1.0.0.jar
com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar

2.写配置
    a.将目标类和切面类（封装了通知方法（在目标方法执行前后执行的方法））加入到IOC容器中
    b.告诉spring哪些是切面类  @Aspect
    c.告诉spring，切面类中的方法都是何时何地运行；
    d.开启基于注解的AOP模式

3.测试


AOP使用场景：

1. AOP加日志保存到数据库
2. AOP做权限验证；
3. AOP做安全检查
4. AOP做事务控制；


